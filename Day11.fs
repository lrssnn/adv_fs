module adv_fs.Day11

open Puz.Input
open FSharpx.String

type Day11() =
    let input = readText "input/input11.txt"

    let getStones input =
        input |> splitChar [| ' ' |] |> Array.map int64

    // Turn a number which must have an even number of digits into two numbers by splitting it in half
    let splitStone stone =
        let str = string stone
        let midpoint = str.Length / 2
        (int64 str[.. midpoint - 1], int64 str[midpoint..])

    /// Evaluate the result of blinking the given stone according to the given strategy,
    /// given that there are so many blinks left
    /// Encapsulates the blink logic outside the recursive calculation engine
    let evaluateStone stone strategy blinksLeft =
        match stone with
        | 0L -> strategy 1L (blinksLeft - 1)
        | x when (string x).Length % 2 = 0 ->
            let a, b = splitStone x
            strategy a (blinksLeft - 1) + strategy b (blinksLeft - 1)
        | _ -> strategy (stone * 2024L) (blinksLeft - 1)

    /// Recursive, memoised function that takes stone and blinksLeft, and returns the number
    /// of stones that will be generated by processing that many blinks on it
    let mBlinksResult =
        // Memoisation storage
        let mutable map = Map.empty

        let rec blinksResult =
            fun stone blinksLeft ->
                if blinksLeft = 0 then
                    1L
                else
                    let cacheOpt = map |> Map.tryFind (stone, blinksLeft)

                    // If we have it in the cache, use it, otherwise generate the result and
                    // Store it for next time
                    match cacheOpt with
                    | Some(value) -> value
                    | None ->
                        let value = evaluateStone stone blinksResult blinksLeft
                        map <- map |> Map.add (stone, blinksLeft) value
                        value

        blinksResult

    interface Day with
        member this.DayName = "11"
        member this.answer1 = "182081"
        member this.answer2 = "216318908621637"

        member this.part1() =
            input
            |> getStones
            |> Array.sumBy (fun stone -> mBlinksResult stone 25)
            |> string

        member this.part2() =
            input
            |> getStones
            |> Array.Parallel.sumBy (fun stone -> mBlinksResult stone 75)
            |> string
